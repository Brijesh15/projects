{"version":3,"sources":["components/header.js","components/home.js","components/settings.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","Brand","Collapse","id","Nav","className","Link","href","React","Component","Home","props","handleConnect","event","data","state","channelArr","target","parseInt","msgtype","connectedId","includes","params","type","username","password","ip","port","console","log","that","axios","post","then","res","setState","name","localStorage","setItem","JSON","stringify","index","indexOf","arr","splice","catch","err","alert","clearData","clear","parse","getItem","Button","onClick","this","style","float","Card","Table","striped","bordered","hover","map","item","key","Settings","handleNameChange","value","handleIpChange","handlePortChange","handleTypeChange","handleUsernameChange","handlePasswordChange","handleSubmit","addChannel","preventDefault","Body","Form","onSubmit","Group","controlId","Label","Control","required","onChange","pattern","App","channel","tempChannelArr","push","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.acbed644.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap'\n\nexport default class Header extends React.Component {\n  render() {\n    return(\n      <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand>Eureka Station</Navbar.Brand>\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/home\">Home</Nav.Link>\n              <Nav.Link href=\"/settings\">Settings</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n      </Navbar>\n    )\n  }\n}\n","import React from 'react'\nimport Header from './header.js'\nimport {Table, Card, Form, Button} from 'react-bootstrap'\nimport axios from 'axios'\n\nexport default class Home extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      \"test\" : [],\n      \"connectedChannel\": \"\",\n      \"connectedId\" : JSON.parse(localStorage.getItem(\"connectedId\")) ? JSON.parse(localStorage.getItem(\"connectedId\")) : [],\n      \"channelArr\" : JSON.parse(localStorage.getItem(\"channelArr\")) ? JSON.parse(localStorage.getItem(\"channelArr\")) : []\n    }\n    console.log(\"ab\", this.props)\n  }\n\n  // componentDidUpdate(prevProps) {\n  //   if(prevProps.value !== this.props.channelArr) {\n  //     this.setState({channelArr : this.props.channelArr});\n  //   }\n  // }\n\n  handleConnect = (event) => {\n    var data = this.state.channelArr[event.target.id]\n    var id = parseInt(event.target.id)\n    var msgtype = \"connect\"\n    if(this.state.connectedId.includes(id)){\n      msgtype = \"disconnect\"\n    }\n    var params = {\n      \"msgtype\": msgtype,\n      \"msg\": {\n        \"type\": data.type,\n        \"username\": data.username,\n        \"password\" : data.password,\n        \"ip\" : data.ip,\n        \"port\": data.port\n       }}\n    console.log(params)\n    let that = this;\n    axios.post(\"http://localhost:12913/compositor/layout\", params)\n      .then(function(res) {\n        if(res.data === \"TRUE\"){\n          if(msgtype === \"connect\") {\n            that.setState({\"connectedChannel\": \"ed to \" + data.name, \"connectedId\" : [...that.state.connectedId,id]}, () => {\n              localStorage.setItem(\"connectedId\",JSON.stringify(that.state.connectedId))\n            })\n          } else {\n            let index = that.state.connectedId.indexOf(id)\n            let arr = that.state.connectedId\n            arr.splice(index, 1)\n            that.setState({\"connectedChannel\": \"\", \"connectedId\" : arr}, () => {\n              localStorage.setItem(\"connectedId\",JSON.stringify(that.state.connectedId))\n            })\n          }\n        }\n\n      }).catch(function(err){\n        alert(err)\n      })\n  }\n\n  clearData = () => {\n    localStorage.clear();\n    this.setState({\n      \"connectedId\" : JSON.parse(localStorage.getItem(\"connectedId\")) ? JSON.parse(localStorage.getItem(\"connectedId\")) : [],\n      \"channelArr\" : JSON.parse(localStorage.getItem(\"channelArr\")) ? JSON.parse(localStorage.getItem(\"channelArr\")) : []\n    })\n  }\n\n\n  render(){\n    return(\n      <div>\n        <Header/>\n        <div>\n        <br/>\n        <h1 id=\"device_name\">\n          <span id=\"device_name_string\">Connect</span>\n          <Button onClick={this.clearData} style={{float: \"right\"}}>Clear</Button>\n        </h1>\n\n        </div>\n        <br/>\n        {/*  <Form inline>\n            <Form.Group controlId=\"channelName\">\n              <Form.Label>Channel Name</Form.Label>&nbsp;:&nbsp;\n              <Form.Control type=\"text\" />\n            </Form.Group>\n           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <Form.Group  controlId=\"description\">\n              <Form.Label>Description</Form.Label>&nbsp;:&nbsp;\n              <Form.Control type=\"text\"  />\n            </Form.Group>\n          </Form> */}\n        <Card ><br/>\n        <Table striped bordered hover>\n          <tbody>{\n            this.state.channelArr.map((item, index) => {\n              return (\n                <tr key={item.name}>\n                  <td>{item.name}</td>\n                  <td>{item.ip}</td>\n                  <td ><Button id={index} onClick={this.handleConnect}>{this.state.connectedId.includes(index)? \"Disconnect\" : \"Connect\"}</Button></td>\n                </tr>\n              )\n            })\n          }\n          </tbody>\n        </Table>\n        </Card>\n      </div>\n    //      <span class=\"sprites shared_green_20_png\"></span>&nbsp;\n    //      <a href=\"process_reset_channel.php?d=11301&amp;source=device\">\n    //         <span class=\"sprites disconnect_png\"></span>\n    //       </a>\n    //     </h1>\n    //     <div class=\"osd_row osd_header text_against_background\">\n    //       <form id=\"osd_filters\" method=\"get\" action=\"index.php\">\n    //       <div class=\"channel_name\" style=\"line-height: 20px; float: left; position: relative\">\n    //       <div>\n    //         <input type=\"hidden\" name=\"page\" id=\"page\" value=\"1\" />\n    //         <input type=\"hidden\" name=\"sort\" id=\"sort\" value=\"c_name\" />\n    //         <input type=\"hidden\" name=\"dir\" id=\"dir\" value=\"asc\" />\n    //         <input type=\"hidden\" name=\"filter_type1\" id=\"filter_type1\" value=\"\" />\n    //         <input type=\"hidden\" name=\"filter_favourites\" id=\"filter_favourites\" value=\"\" />\n    //       </div>\n    //       <div style=\"padding: 4px 2px 0px\">\n    //         <a href=\"index.php?filter_favourites=true&amp;page=\" class=\"star_faded\"></a>\n    //         <a href=\"index.php?filter_type1=channels&amp;page=\" class=\"monitors_blue_purple\"></a>\n    //       </div>\n    //       <strong>Channel Name</strong> &#32;\n    //       <a href=\"index.php?sort=c_name&amp;dir=asc\">\n    //         <span class=\"sprites arrow_up_green_18_png\"></span>\n    //       </a> &#32;<a href=\"index.php?sort=c_name&amp;dir=desc\">\n    //       <span class=\"sprites arrow_down_blue_18_png\"></span>\n    //       </a><br />\n    //       <span class=\"osd_filter\"><input type=\"text\" name=\"filter_c_name\" id=\"filter_c_name\" value=\"\" class=\"text_field osd_filter\" />\n    //       </span>&#32;<input type=\"submit\" value=\"\" class=\"sprites find_png osd_filter_icon\" />\n    //     </div>\n    //     <div class=\"channel_description\" style=\"line-height:20px;\">\n    //       <strong>Description</strong> &#32;\n    //       <a href=\"index.php?sort=c_description&amp;dir=asc\">\n    //         <span class=\"sprites arrow_up_blue_18_png\"></span>\n    //       </a> &#32;\n    //       <a href=\"index.php?sort=c_description&amp;dir=desc\">\n    //         <span class=\"sprites arrow_down_blue_18_png\"></span>\n    //       </a><br />\n    //       <span class=\"osd_filter\">\n    //         <input type=\"text\" name=\"filter_c_description\" id=\"filter_c_description\" value=\"\" class=\"text_field osd_filter\" />\n    //       </span>&#32;\n    //         <input type=\"submit\" value=\"\" class=\"sprites find_png osd_filter_icon\" />\n    //     </div>\n    //   </form>\n    // </div>\n    // <div id=\"osd_channel_list_border\">\n    //   <div class=\"osd_row osd_channel_row\">\n    //     <div class=\"channel_name yellow\">\n    //       <a href=\"shortcuts.php?type=channel&amp;id=1432201\" class=\"star_blue\"></a>\n    //       <span class=\"monitor\"></span>Channel-1\n    //     </div>\n    //     <div class=\"channel_description\"></div>\n    //     <div class=\"channel_buttons\">\n    //       <a href=\"process_multi_user_info.php?returnto=index.php\" style=\"color:#25971a;\" >\n    //         <span class=\" osd_channel_silk_icon\" style=\"margin-right:px;\"></span>\n    //       </a>\n    //       <a href=\"process_reset_channel.php?d=11301&amp;source=device\">\n    //         <span class=\"sprites disconnect_png osd_channel_silk_icon\"></span>\n    //       </a>\n    //       <a href=\"process_change_channel.php?c=1432201&amp;m=v\">\n    //         <span class=\"sprites eye_blue_png osd_channel_button\"></span>\n    //       </a>\n    //       <a href=\"process_close_osd.php\">\n    //         <span class=\"sprites shared_green_png osd_channel_button\"></span>\n    //       </a>\n    //       <a href=\"process_change_channel.php?c=1432201&amp;m=c\">\n    //         <span class=\"sprites control_blue_png osd_channel_button\"></span>\n    //       </a>\n    //       <a href=\"process_change_channel.php?c=1432201&amp;m=e\">\n    //         <span class=\"sprites padlock_blue_png osd_channel_button\"></span>\n    //       </a>\n    //     </div>\n    //   </div>\n    //   <div class=\"osd_spacer_row\">&nbsp;</div>\n    //   <div class=\"osd_spacer_row\">&nbsp;</div>\n    //   <div class=\"osd_spacer_row\">&nbsp;</div>\n    //   <div class=\"osd_spacer_row\">&nbsp;</div>\n    //   <div class=\"osd_spacer_row\">&nbsp;</div>\n    //   <div class=\"osd_spacer_row\">&nbsp;</div>\n    //   <div class=\"osd_spacer_row\">&nbsp;</div>\n    //   <div class=\"osd_spacer_row\">&nbsp;</div>\n    //   <div class=\"osd_spacer_row\">&nbsp;</div>\n    // </div>\n    // <div class=\"pagination_row text_against_background\">\n    //   <div class=\"pagination_right\">Displaying channel 1 of 1</div>\n    // </div>\n    //\n    // <div id=\"profiling\">Page rendered in 30ms</div>\n    //\n    // // <div style=\"visibility:hidden;\">\n    // <img src=\"https://192.168.17.103/shadowSession.php?v=refresh&shadowId=8iehf1p4o86ehlla5is86hhom2\"/>\n    // </div>\n    )\n  }\n}\n","import React from 'react'\nimport Header from './header.js'\nimport { Card,Form, Button} from 'react-bootstrap'\n\nexport default class Settings extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      \"name\" : \"\",\n      \"ip\": \"\",\n      \"port\": \"\",\n      \"type\" : \"\",\n      \"username\": \"\",\n      \"password\": \"\"\n    }\n  }\n\n  handleNameChange = (event) => {\n    this.setState({\"name\": event.target.value})\n  }\n\n  handleIpChange = (event) => {\n    this.setState({\"ip\": event.target.value})\n  }\n\n  handlePortChange = (event) => {\n    this.setState({\"port\": event.target.value})\n  }\n\n  handleTypeChange = (event) => {\n    this.setState({\"type\": event.target.value})\n  }\n\n  handleUsernameChange = (event) => {\n    this.setState({\"username\": event.target.value})\n  }\n\n  handlePasswordChange = (event) => {\n    this.setState({\"password\": event.target.value})\n  }\n\n  handleSubmit = (event) => {\n    this.props.addChannel({\"name\": this.state.name, \"ip\": this.state.ip, \"port\": this.state.port, \"type\": this.state.type, \"username\": this.state.username, \"password\": this.state.password})\n    // this.props.history.push('/home')\n    alert(\"Success\");\n    this.setState({\n      \"name\" : \"\",\n      \"ip\": \"\",\n      \"port\": \"\",\n      \"type\": \"\",\n      \"username\": \"\",\n      \"password\": \"\"\n    })\n    event.preventDefault();\n  }\n\n  render(){\n    return(\n      <div>\n        <Header/>\n        <br/><br/>\n         <Card style={{\"width\":\"50%\", \"margin\":\"auto\"}}>\n          <Card.Body>\n          <Form onSubmit={this.handleSubmit}>\n            <Form.Group  controlId=\"channelName\">\n              <Form.Label>Channel Name</Form.Label>&nbsp;:&nbsp;\n              <Form.Control required type=\"text\" value={this.state.name} onChange={this.handleNameChange} />\n            </Form.Group>\n           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <Form.Group  controlId=\"channelIp\">\n              <Form.Label>Channel IP</Form.Label>&nbsp;:&nbsp;\n              <Form.Control required pattern=\"^([0-9]{1,3}\\.){3}[0-9]{1,3}$\" value={this.state.ip} onChange={this.handleIpChange}  />\n            </Form.Group>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n             <Form.Group  controlId=\"channelPort\">\n               <Form.Label>Channel port</Form.Label>&nbsp;:&nbsp;\n               <Form.Control required type=\"number\" value={this.state.port} onChange={this.handlePortChange} />\n             </Form.Group>\n            <br/>\n            <Form.Group  controlId=\"channelType\">\n              <Form.Label>Type</Form.Label>&nbsp;:&nbsp;\n              <Form.Control required type=\"text\" value={this.state.type} onChange={this.handleTypeChange}  />\n            </Form.Group>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <Form.Group  controlId=\"channelUsername\">\n              <Form.Label>Username</Form.Label>&nbsp;:&nbsp;\n              <Form.Control required type=\"text\" value={this.state.username} onChange={this.handleUsernameChange}  />\n            </Form.Group>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n             <Form.Group  controlId=\"channelPassword\">\n               <Form.Label>Password</Form.Label>&nbsp;:&nbsp;\n               <Form.Control required type=\"password\" value={this.state.password} onChange={this.handlePasswordChange}  />\n             </Form.Group>\n               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n             <Button variant=\"primary\" type=\"submit\" >\n              Submit\n            </Button>\n          </Form>\n            </Card.Body>\n          </Card>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './components/home.js'\nimport Settings from './components/settings.js'\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      channelArr: []\n    }\n  }\n\n  addChannel = (channel) => {\n    console.log(\"test\",channel)\n    var tempChannelArr = JSON.parse(localStorage.getItem(\"channelArr\")) ? JSON.parse(localStorage.getItem(\"channelArr\")) : [];\n    tempChannelArr.push(channel)\n    console.log(\"tempChannel\", tempChannelArr)\n    this.setState({channelArr: tempChannelArr})\n    localStorage.setItem(\"channelArr\",JSON.stringify(tempChannelArr))\n\n  }\n\n  render() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/home\" >\n            <Home channelArr={this.state.channelArr} />\n          </Route>\n          <Route path=\"/settings\" >\n            <Settings addChannel={this.addChannel}/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  ) };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}