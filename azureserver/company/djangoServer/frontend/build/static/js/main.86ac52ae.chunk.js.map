{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","getCompanyId","name","state","companyList","filter","item","id","handleUploadCompanyChange","event","setState","target","value","handleUploadFileChange","files","handleDownloadCompanyChange","handleSubmitUpload","preventDefault","that","formData","FormData","Object","keys","uploadFile","key","append","axios","post","uploadCompany","then","res","console","log","fileInput","alert","data","message","catch","err","handleSubmitDownload","downloadCompany","get","success","FileDownload","this","items","className","active","loading","spinner","text","style","Navbar","bg","variant","Brand","Card","width","margin","Header","Title","Body","Form","onSubmit","Row","Col","Group","as","controlId","Label","Control","onChange","map","type","placeholder","ref","required","multiple","Button","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86ac52ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Navbar, Nav, Card, Button, Form, Row, Col, Spinner } from 'react-bootstrap'\nimport axios from 'axios'\nimport  FileDownload  from 'js-file-download';\nimport LoadingOverlay from 'react-loading-overlay';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      \"companyList\" : [],\n      \"uploadCompany\": \"\",\n      \"uploadFile\": \"\",\n      \"downloadCompany\" : \"\",\n      \"loading\" : false\n    }\n  }\n\n  getCompanyId = (name) => {\n    return this.state.companyList.filter(item => item.name === name)[0].id\n  }\n\n  componentDidMount() {\n    let that = this;\n    axios.get('/companies')\n    .then(function(res) {\n      console.log(\"1\", res)\n      that.setState({\"companyList\": res.data.items, \"uploadCompany\": res.data.items[0].name, \"downloadCompany\": res.data.items[0].name})\n\n    })\n  }\n\n  handleUploadCompanyChange = (event) => {\n    this.setState({\"uploadCompany\": event.target.value})\n  }\n\n  handleUploadFileChange = (event) => {\n    // console.log(\"files\", Object.values(event.target.files))\n    // let arr = []\n    // for(let i =0; i < event.target.files.length; i++) {\n    //   arr[i] = event.target.files[i]\n    // }\n    // console.log(\"uF\", arr)\n    // this.setState({\"uploadFile\": arr})\n    this.setState({\"uploadFile\": event.target.files})\n  }\n\n  handleDownloadCompanyChange = (event) => {\n    this.setState({\"downloadCompany\": event.target.value})\n  }\n\n  handleSubmitUpload = (event) => {\n    event.preventDefault();\n    let that = this;\n    this.setState({\"loading\": true})\n      var formData = new FormData();\n      for (const key of Object.keys(this.state.uploadFile)) {\n          formData.append('file', this.state.uploadFile[key])\n      }\n\n\n      // let data = new FormData()\n      // data.append('file', that.state.uploadFile)\n      // console.log(\"data\", data.values())\n      // const config = { headers: { 'Content-Type': 'multipart/form-data' } };\n     axios.post('/impExpCompanyQrcode/'+this.getCompanyId(this.state.uploadCompany),formData)\n      .then(function(res) {\n        console.log(\"1\", res)\n        that.fileInput.value = \"\";\n        that.setState({\"uploadFile\": \"\"})\n        that.setState({\"loading\": false})\n        alert(res.data.message)\n        //that.setState({\"companyList\": res.data.items, \"downloadCompany\": res.data.items[0].name})\n      }).catch(function(err){\n        that.fileInput.value = \"\";\n        that.setState({\"uploadFile\": \"\"})\n        that.setState({\"loading\": false})\n        alert(err)\n      })\n\n  }\n\n  handleSubmitDownload = (event) => {\n    event.preventDefault();\n    let that = this;\n    console.log(\"2\", this.state.downloadCompany)\n    axios.get('/impExpCompanyQrcode/'+this.getCompanyId(this.state.downloadCompany))\n    .then(function(res) {\n      console.log(\"1\", res)\n      if(res.data.success){\n        alert(res.data.message)\n      } else if(res.data.success === false){\n        alert(res.data.message)\n      }else {\n         FileDownload(res.data, that.state.downloadCompany + \".xlsx\");\n      }\n\n      //that.setState({\"companyList\": res.data.items, \"downloadCompany\": res.data.items[0].name})\n    })\n  }\n\n\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <LoadingOverlay\n          active={this.state.loading}\n          spinner\n          text='Uploading...'\n          >\n        <div style={{\"height\": \"100vh\"}}>\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand>Azure Press</Navbar.Brand>\n        </Navbar>\n\n          <br/>\n          <br/>\n          <Card style={{ width: '75%', margin: 'auto' }}>\n            <Card.Header>\n              <Card.Title>Upload</Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Form onSubmit={this.handleSubmitUpload}>\n                <Row>\n                  <Col>\n                  <Row>\n                  <Form.Group as={Col} controlId=\"downloadForm.companySelect\">\n                    <Form.Label>Select a Company:</Form.Label>\n                    <Form.Control as=\"select\" value={this.state.uploadCompany} onChange={this.handleUploadCompanyChange}>\n                    {\n                      this.state.companyList.map((item) => <option>{item.name}</option>)\n                    }\n                    </Form.Control>\n                  </Form.Group>\n                  <Form.Group as={Col} controlId=\"downloadForm.Select\">\n                    <Form.Label>File to be uploaded:</Form.Label>\n                    <Form.Control  onChange={this.handleUploadFileChange} type=\"file\" placeholder=\"Choose file\" ref={ref=> this.fileInput = ref} required multiple/>\n                  </Form.Group>\n                  </Row>\n                  </Col>\n                  <Col>\n                  <br/>\n                  <Button variant=\"primary\" type=\"submit\">\n                  Upload</Button>\n                  </Col>\n                </Row>\n              </Form>\n            </Card.Body>\n          </Card>\n          <br/>\n          <br/>\n          <Card style={{ width: '75%', margin: 'auto' }}>\n            <Card.Header>\n              <Card.Title>Download</Card.Title>\n            </Card.Header>\n            <Card.Body>\n                <Form onSubmit={this.handleSubmitDownload}>\n                  <Row>\n                    <Form.Group as={Col} controlId=\"downloadForm.companySelect\">\n                      <Form.Label>Select a Company:</Form.Label>\n                      <Form.Control as=\"select\" value={this.state.downloadCompany} onChange={this.handleDownloadCompanyChange}>\n                      {\n                        this.state.companyList.map((item) => <option>{item.name}</option>)\n                      }\n                      </Form.Control>\n                    </Form.Group>\n                    <Col>\n                    <br/>\n                    <Button variant=\"primary\" type=\"submit\">Download</Button>\n                    </Col>\n                  </Row>\n                </Form>\n\n            </Card.Body>\n          </Card>\n        </div>\n        </LoadingOverlay>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}